// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique @db.VarChar()
  password    String      @db.VarChar()
  firstName   String?     @db.VarChar()
  lastName    String?     @db.VarChar()
  phoneNumber String?     @db.VarChar()
  isActivated Boolean     @default(false)
  bookings    Booking[]
  userRoles   UserRoles[]
  properties  Property[]
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar()
  userRoles UserRoles[]
}

model UserRoles {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, roleId])
}

model Booking {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  roomId             Int
  checkIn            DateTime
  checkOut           DateTime
  totalPrice         Float
  status             BookingStatus        @default(PENDING)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room               Room                 @relation(fields: [roomId], references: [id])
  propertyServices   PropertyServices[]
  propertyTreatments PropertyTreatments[]
}

enum BookingStatus {
  CONFIRMED
  CANCELED
  PENDING
}

model Property {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar()
  address            String               @db.VarChar()
  postalCode         String               @db.VarChar()
  description        String
  ownerId            Int
  propertyType       PropertyType
  rating             Float                @default(0)
  contactName        String               @db.VarChar()
  contactPhone       String               @db.VarChar()
  status             PropertyStatus       @default(PENDING)
  owner              User                 @relation(fields: [ownerId], references: [id])
  rooms              Room[]
  propertyPhotos     PropertyPhoto[]
  propertyServices   PropertyServices[]
  propertyTreatments PropertyTreatments[]
  roomTypes          RoomType[]
}

enum PropertyType {
  SANATORIUM
  HOTEL
}

enum PropertyStatus {
  PENDING
  ACTIVE
  REJECTED
}

model Photo {
  id             Int             @id @default(autoincrement())
  url            String
  propertyPhotos PropertyPhoto[]
}

model Facility {
  id                 Int                @id @default(autoincrement())
  name               String             @db.VarChar()
  roomTypeFacilities RoomTypeFacility[]
}

model Room {
  id          Int       @id @default(autoincrement())
  roomTypeId  Int
  propertyId  Int
  roomType    RoomType  @relation(fields: [roomTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookings    Booking[]
}

model RoomType {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String?
  surfaceArea        Float
  pricePerDay        Float
  propertyId         Int
  capacity           Int
  property           Property           @relation(fields: [propertyId], references: [id])
  rooms              Room[]
  roomTypeFacilities RoomTypeFacility[]
}

model RoomTypeFacility {
  id         Int      @id @default(autoincrement())
  roomTypeId Int
  facilityId Int
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@unique([roomTypeId, facilityId])
}

model PropertyPhoto {
  id         Int      @id @default(autoincrement())
  propertyId Int
  photoId    Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photo      Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PropertyServices {
  id         Int      @id @default(autoincrement())
  propertyId Int
  serviceId  Int
  price      Float
  bookingId  Int?
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  booking    Booking? @relation(fields: [bookingId], references: [id])
  @@unique([propertyId, serviceId])
}

model PropertyTreatments {
  id          Int       @id @default(autoincrement())
  propertyId  Int
  treatmentId Int
  price       Float
  bookingId   Int?
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  treatment   Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  booking     Booking?  @relation(fields: [bookingId], references: [id])
  @@unique([propertyId, treatmentId])
}

model Service {
  id               Int                @id @default(autoincrement())
  name             String
  propertyServices PropertyServices[]
}

model Treatment {
  id                 Int                  @id @default(autoincrement())
  name               String
  propertyTreatments PropertyTreatments[]
}
